// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Protocol files/RPC.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Specifies the message type contained in message
type RPCMessageTYPE int32

const (
	RPC_PING       RPCMessageTYPE = 0
	RPC_STORE      RPCMessageTYPE = 1
	RPC_FIND_NODE  RPCMessageTYPE = 2
	RPC_FIND_VALUE RPCMessageTYPE = 3
	RPC_PIN        RPCMessageTYPE = 4
	RPC_UNPIN      RPCMessageTYPE = 5
)

var RPCMessageTYPE_name = map[int32]string{
	0: "PING",
	1: "STORE",
	2: "FIND_NODE",
	3: "FIND_VALUE",
	4: "PIN",
	5: "UNPIN",
}

var RPCMessageTYPE_value = map[string]int32{
	"PING":       0,
	"STORE":      1,
	"FIND_NODE":  2,
	"FIND_VALUE": 3,
	"PIN":        4,
	"UNPIN":      5,
}

func (x RPCMessageTYPE) String() string {
	return proto.EnumName(RPCMessageTYPE_name, int32(x))
}

func (RPCMessageTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_638d2753ed677b27, []int{0, 0}
}

type RPC struct {
	// Unique 160-bit message ID used for routing purposes
	MessageID   []byte         `protobuf:"bytes,1,opt,name=messageID,proto3" json:"messageID,omitempty"`
	MessageType RPCMessageTYPE `protobuf:"varint,2,opt,name=messageType,proto3,enum=protocol.RPCMessageTYPE" json:"messageType,omitempty"`
	// Contains the serialized message
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	IPaddress            string   `protobuf:"bytes,4,opt,name=IPaddress,proto3" json:"IPaddress,omitempty"`
	OriginalSender       []byte   `protobuf:"bytes,5,opt,name=originalSender,proto3" json:"originalSender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPC) Reset()         { *m = RPC{} }
func (m *RPC) String() string { return proto.CompactTextString(m) }
func (*RPC) ProtoMessage()    {}
func (*RPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_638d2753ed677b27, []int{0}
}

func (m *RPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPC.Unmarshal(m, b)
}
func (m *RPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPC.Marshal(b, m, deterministic)
}
func (m *RPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPC.Merge(m, src)
}
func (m *RPC) XXX_Size() int {
	return xxx_messageInfo_RPC.Size(m)
}
func (m *RPC) XXX_DiscardUnknown() {
	xxx_messageInfo_RPC.DiscardUnknown(m)
}

var xxx_messageInfo_RPC proto.InternalMessageInfo

func (m *RPC) GetMessageID() []byte {
	if m != nil {
		return m.MessageID
	}
	return nil
}

func (m *RPC) GetMessageType() RPCMessageTYPE {
	if m != nil {
		return m.MessageType
	}
	return RPC_PING
}

func (m *RPC) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RPC) GetIPaddress() string {
	if m != nil {
		return m.IPaddress
	}
	return ""
}

func (m *RPC) GetOriginalSender() []byte {
	if m != nil {
		return m.OriginalSender
	}
	return nil
}

func init() {
	proto.RegisterEnum("protocol.RPCMessageTYPE", RPCMessageTYPE_name, RPCMessageTYPE_value)
	proto.RegisterType((*RPC)(nil), "protocol.RPC")
}

func init() { proto.RegisterFile("Protocol files/RPC.proto", fileDescriptor_638d2753ed677b27) }

var fileDescriptor_638d2753ed677b27 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x4d, 0x3f, 0xdc, 0xed, 0xa8, 0x25, 0xcc, 0x29, 0x82, 0x87, 0xb2, 0x07, 0xe9, 0xa9,
	0x82, 0x1e, 0x3d, 0xc9, 0x36, 0x4a, 0x40, 0xb2, 0x21, 0xbb, 0x15, 0xf6, 0x24, 0xd5, 0xc6, 0xa5,
	0x50, 0xb7, 0xa5, 0xf1, 0xe2, 0x2f, 0xf1, 0xef, 0x4a, 0x4a, 0x4b, 0xc5, 0x5b, 0x9e, 0x27, 0xf3,
	0xbe, 0xc9, 0x00, 0x53, 0x7d, 0xfb, 0xd5, 0xbe, 0xb7, 0x4d, 0xf2, 0x51, 0x37, 0xc6, 0xde, 0x68,
	0xb5, 0xce, 0x3a, 0xa7, 0x70, 0xd9, 0x8d, 0x37, 0xab, 0x1f, 0x0f, 0x7c, 0xad, 0xd6, 0x78, 0x05,
	0xd1, 0xa7, 0xb1, 0xb6, 0x3c, 0x18, 0x91, 0x33, 0x92, 0x90, 0xf4, 0x5c, 0xcf, 0x02, 0xef, 0xe1,
	0x6c, 0x84, 0xdd, 0x77, 0x67, 0x98, 0x97, 0x90, 0x34, 0xbe, 0xbd, 0xcc, 0xa6, 0x96, 0xcc, 0x35,
	0x4f, 0x03, 0x7b, 0xc5, 0xf5, 0xdf, 0x69, 0x64, 0xb0, 0x18, 0x91, 0xf9, 0x43, 0xf1, 0x84, 0xee,
	0x51, 0xa1, 0xca, 0xaa, 0xea, 0x8d, 0xb5, 0x2c, 0x48, 0x48, 0x1a, 0xe9, 0x59, 0xe0, 0x35, 0xc4,
	0x6d, 0x5f, 0x1f, 0xea, 0x63, 0xd9, 0x6c, 0xcd, 0xb1, 0x32, 0x3d, 0x0b, 0x87, 0xf8, 0x3f, 0xbb,
	0x2a, 0xe6, 0xcf, 0xed, 0x15, 0xc7, 0x25, 0x04, 0x4a, 0xc8, 0x27, 0x7a, 0x82, 0x11, 0x84, 0xdb,
	0xdd, 0x46, 0x73, 0x4a, 0xf0, 0x02, 0xa2, 0x47, 0x21, 0xf3, 0x57, 0xb9, 0xc9, 0x39, 0xf5, 0x30,
	0x06, 0x18, 0xf0, 0xe5, 0xe1, 0xb9, 0xe0, 0xd4, 0xc7, 0x05, 0xf8, 0x4a, 0x48, 0x1a, 0xb8, 0x48,
	0x21, 0xdd, 0x31, 0x7c, 0x3b, 0x1d, 0xb6, 0xbb, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x07,
	0x1e, 0xdc, 0x46, 0x01, 0x00, 0x00,
}
